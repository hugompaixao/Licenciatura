"""Triangle moves along a circular path"""
import math
import OpenGL.GL as GL

from core.base import Base
from core.utils import Utils
from core.attribute import Attribute
from core.uniform import Uniform


class Example(Base):
    """ Animate triangle moving in a circular path around the origin """
    def initialize(self):
        print("Initializing program...")
        # Initialize program #
        vs_code = """
            in vec3 position;
            uniform vec3 translation;
            void main()
            {
                gl_Position = vec4(position.x + translation.x, position.y + translation.y, position.z + translation.z, 1.0);
            }
        """
        fs_code = """
            uniform vec3 baseColor;
            out vec4 fragColor;
            void main()
            {
                fragColor = vec4(baseColor.r, baseColor.g, baseColor.b, 1.0);
            }
        """
        self.program_ref = Utils.initialize_program(vs_code, fs_code)

        GL.glLineWidth(4)
        # Render settings (optional) #
        # Specify color used when clearly
        GL.glClearColor(0.0, 0.0, 0.0, 1.0)
        # Set up vertex array object #
        vao_ref = GL.glGenVertexArrays(1)
        GL.glBindVertexArray(vao_ref)
        # Set up vertex attribute #
        position_data = [[0.3802204030149, 0.2460871967168, 0.0],
                        [0.4709673214516, 0.5183279520267, 0.0],
                        [0.4082045801197, 0.55377662547, 0.0],
                        [0.3405565195988, 0.5825896882845, 0.0],
                        [0.2528645892938, 0.611402751099, 0.0],
                        [0.1639199171273, 0.6301938790215, 0.0],
                        [0.0812389542683, 0.641468555775, 0.0],
                        [0.0110854100243, 0.6452267813595, 0.0],
                        [-0.0653318435272, 0.6402158139135, 0.0],
                        [-0.1392436133557, 0.631446620883, 0.0],
                        [-0.2056389320152, 0.6126554929605, 0.0],
                        [-0.2682760250902, 0.588853397592, 0.0],
                        [-0.3309131181652, 0.551271141747, 0.0],
                        [-0.3747590833177, 0.516194369625, 0.0],
                        [-0.4110885973012, 0.4773593719185, 0.0],
                        [-0.4461653694232, 0.415975020705, 0.0],
                        [-0.4649564973457, 0.363359862522, 0.0],
                        [-0.4737256903762, 0.300722769447, 0.0],
                        [-0.4774839159607, 0.2493603531255, 0.0],
                        [-0.4749784322377, 0.208019871696, 0.0],
                        [-0.4687147229302, 0.165426648405, 0.0],
                        [-0.4536818205922, 0.1215806832525, 0.0],
                        [-0.4348906926697, 0.0814929436845, 0.0],
                        [-0.3998139205477, 0.0414052041165, 0.0],
                        [-0.3810227926252, 0.015097625025, 0.0],
                        [-0.3471987623647, -0.012462695928, 0.0],
                        [-0.3121219902427, -0.037517533158, 0.0],
                        [-0.2707815088132, -0.0638251122495, 0.0],
                        [-0.2319465111067, -0.085121723895, 0.0],
                        [-0.1818368366467, -0.102660109956, 0.0],
                        [-0.1203023443844, -0.1237662854347, 0.0],
                        [-0.0640791016657, -0.140242365801, 0.0],
                        [-0.0139694272057, -0.1515170425545, 0.0],
                        [0.0348875053928, -0.165297203031, 0.0],
                        [0.0799862124068, -0.1790773635075, 0.0],
                        [0.1138102426673, -0.192857523984, 0.0],
                        [0.1288431450053, -0.2091431681835, 0.0],
                        [0.1376123380358, -0.230439779829, 0.0],
                        [0.1351068543128, -0.2492309077515, 0.0],
                        [0.1275904031438, -0.2717802612585, 0.0],
                        [0.1125575008058, -0.2918241310425, 0.0],
                        [0.1, -0.3, 0.0],
                        [0.0774807286838, -0.310615258965, 0.0],
                        [0.0461621821463, -0.318131710134, 0.0],
                        [0.0035689588553, -0.3143734845495, 0.0],
                        [-0.0502989411892, -0.3118680008265, 0.0],
                        [-0.0869969026848, -0.3037018574429, 0.0],
                        [-0.1217052272947, -0.2968350984885, 0.0],
                        [-0.1580347412782, -0.2868131635965, 0.0],
                        [-0.2056389320152, -0.27303300312, 0.0],
                        [-0.2469794134447, -0.255494617059, 0.0],
                        [-0.2820561855667, -0.237956230998, 0.0],
                        [-0.3158802158272, -0.22292332866, 0.0],
                        [-0.3559679553952, -0.1966157495685, 0.0],
                        [-0.3910447275172, -0.1728136542, 0.0],
                        [-0.4160995647472, -0.157780751862, 0.0],
                        [-0.5088024624982, -0.4421531544225, 0.0],
                        [-0.4724729485147, -0.468460733514, 0.0],
                        [-0.4261214996392, -0.49852653819, 0.0],
                        [-0.3872865019327, -0.5198231498355, 0.0],
                        [-0.3396823111957, -0.5398670196195, 0.0],
                        [-0.2858144111512, -0.558658147542, 0.0],
                        [-0.2357047366912, -0.5774492754645, 0.0],
                        [-0.1881005459542, -0.5849657266335, 0.0],
                        [-0.1455073226632, -0.5924821778025, 0.0],
                        [-0.0828702295882, -0.603756854556, 0.0],
                        [-0.0315078132667, -0.608767822002, 0.0],
                        [0.0311292798083, -0.6100205638635, 0.0],
                        [0.1200739519748, -0.6050095964175, 0.0],
                        [0.1764473357423, -0.593734919664, 0.0],
                        [0.2378316869558, -0.57369104988, 0.0],
                        [0.3054797474768, -0.54863621265, 0.0],
                        [0.3618531312442, -0.518570407974, 0.0],
                        [0.4119628057042, -0.4797354102675, 0.0],
                        [0.4658307057487, -0.4233620265, 0.0],
                        [0.5034129615937, -0.358219449702, 0.0],
                        [0.5234568313777, -0.280549454289, 0.0],
                        [0.5284677988237, -0.2141541356295, 0.0],
                        [0.5259623151007, -0.165297203031, 0.0],
                        [0.5133354365937, -0.1075225270501, 0.0],
                        [0.4921764612527, -0.0346416119869, 0.0],
                        [0.452209507831, 0.0288353140359, 0.0],
                        [0.4051895626289, 0.0735042619779, 0.0],
                        [0.3628716119471, 0.1134712153996, 0.0],
                        [0.3017456831844, 0.1416831825208, 0.0],
                        [0.2335667626414, 0.1581401633416, 0.0],
                        [0.1747918311388, 0.1840011332027, 0.0],
                        [0.1042619133357, 0.2004581140234, 0.0],
                        [0.0407849873129, 0.2169150948441, 0.0],
                        [-0.0226919387099, 0.2404250674452, 0.0],
                        [-0.0673608866518, 0.259233045526, 0.0],
                        [-0.0825525409107, 0.2745988036949, 0.0],
                        [-0.0840971695328, 0.2923620328494, 0.0],
                        [-0.0825525409107, 0.3093529476928, 0.0],
                        [-0.0655616260673, 0.3302054340916, 0.0],
                        [-0.0485707112238, 0.3410178344465, 0.0],
                        [-0.0254012818919, 0.3471963489351, 0.0],
                        [-0.0084103670484, 0.3495132918683, 0.0],
                        [0.0132144336614, 0.3479686632461, 0.0],
                        [0.0705443901038, 0.3449846582406, 0.0],
                        [0.1266950556587, 0.3379658250463, 0.0],
                        [0.168808054825, 0.3291922835533, 0.0],
                        [0.207411637394, 0.3151546171646, 0.0],
                        [0.2530340531574, 0.304626367373, 0.0],
                        [0.2951470523236, 0.2870792843871, 0.0],
                        [0.3337506348927, 0.2677774931026, 0.0]]
        self.vertex_count = len(position_data)
        position_attribute = Attribute('vec3', position_data)
        position_attribute.associate_variable(self.program_ref, 'position')
        # Set up uniforms #
        self.translation = Uniform('vec3', [ 0.0, 0.0, 0.0])
        self.translation.locate_variable(self.program_ref, 'translation')
        self.base_color = Uniform('vec3', [1.0, 0.0, 0.0])
        self.base_color.locate_variable(self.program_ref, 'baseColor')

    def update(self):
        """ Update data """
        #self.base_color.data[0] = (math.sin(3 * self.time) + 1) / 2
        GL.glClear(GL.GL_COLOR_BUFFER_BIT)
        #Controls
        # Movement speed factor
        move_speed = 0.1
        # Check for key presses and adjust the translation accordingly
        if 'left' in self.input.key_pressed_list:
            self.translation.data[0] -= move_speed
        if 'right' in self.input.key_pressed_list:
            self.translation.data[0] += move_speed
        if 'up' in self.input.key_pressed_list:
            self.translation.data[1] += move_speed
        if 'down' in self.input.key_pressed_list:
            self.translation.data[1] -= move_speed

        GL.glUseProgram(self.program_ref)
        self.base_color.upload_data()
        self.translation.upload_data()
        GL.glDrawArrays(GL.GL_LINE_LOOP, 0, self.vertex_count)


# Instantiate this class and run the program
Example().run()